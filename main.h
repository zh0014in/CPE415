#ifndef _MAIN_H
#define _MAIN_H

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "dct.h"

int main();
int openFile();
void partition();
void quantize();
void zigzag();
void dpcmRle();
char* genCode(int, int);
void ddct8x8s(int i, double **a);

#define FILENAME "barbara.pgm"
#define HEIGHT 512
#define WIDTH 512
#define HEAD 57
#define HBLK (WIDTH/8)
#define VBLK (HEIGHT/8)
#define TBLK HBLK*VBLK
#define MAXLINE 23
#define DCLINE 12
#define ACLINE 162
#define F0 151

#define DEBUG_MODE 0

typedef unsigned char byte;
struct dcCodeBook {
	char category;
	char code[10];
};
struct acCodeBook {
	char run;
	char level;
	char code[17];
};

const char* pFileName = FILENAME;
FILE* pFile;
FILE* fp;
double imgArray[WIDTH][HEIGHT];
double imgBlock[8][8];
const int quanMatrix[8][8] = { { 16, 11, 10, 16, 24, 40, 51, 61 }, { 12, 12, 14,
		19, 26, 58, 60, 55 }, { 14, 13, 16, 24, 40, 57, 69, 56 }, { 14, 17, 22,
		29, 51, 87, 80, 62 }, { 18, 22, 37, 56, 68, 109, 103, 77 }, { 24, 35,
		55, 64, 81, 104, 113, 92 }, { 49, 64, 78, 87, 103, 121, 120, 101 }, {
		72, 92, 95, 98, 112, 100, 103, 99 } };
double DCTcoeff[64];
const int zigzagIndex[] = { 0, 1, 2, 3, 3, 0, 1, 1, 1, 2, 3, 3, 3, 3, 0, 1, 1,
		1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3,
		3, 2, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 2, 1, 1, 1, 0, 3, 3, 2, 1, 0 };

double testBlock[8][8] = { { 100, 100, 74, 73, 82, 81, 54, 56 }, { 60, 59, 56,
		57, 50, 49, 53, 53 }, { 50, 52, 58, 47, 52, 48, 47, 51 }, { 48, 47, 47,
		48, 44, 47, 50, 70 }, { 61, 67, 47, 60, 39, 40, 87, 86 }, { 92, 90, 57,
		93, 48, 43, 112, 56 }, { 93, 121, 67, 84, 86, 91, 72, 66 }, { 92, 114,
		113, 62, 54, 58, 77, 160 } };
int QS;
struct acCodeBook acCode[ACLINE];
struct dcCodeBook dcCode[DCLINE];
int preDC;
int pblk, ptblk;
static char mask[8] = { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };
int elemPtr = 0;
unsigned char elem[8];
/*
unsigned char head[] = { 0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00,
		0x01, 0x01,
		0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB,
		0x00, 0x43, 0x00, 0x10, 0x0B, 0x0C, 0x0E, 0x0C, 0x0A, 0x10, 0x0E, 0x0D,
		0x0E, 0x12, 0x11, 0x10, 0x13, 0x18, 0x28, 0x1A, 0x18, 0x16, 0x16, 0x18,
		0x31, 0x23, 0x25, 0x1D, 0x28, 0x58, 0x33, 0x3D, 0x3C, 0x39, 0x33, 0x38,
		0x37, 0x40, 0x48, 0x5C, 0x4E, 0x40, 0x44, 0x57, 0x45, 0x37, 0x38, 0x50,
		0x6D, 0x51, 0x57, 0x5F, 0x62, 0x67, 0x68, 0x67, 0x3E, 0x4D, 0x71, 0x79,
		0x70, 0x64, 0x78, 0x5C, 0x65, 0x67, 0x63, 0xFF, 0xC0, 0x00, 0x0B, 0x08,
		0x02, 0x00, 0x02, 0x00, 0x01, 0x01, 0x22, 0x00, 0xFF, 0xC4, 0x00, 0x1F,
		0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x02, 0x04, 0x05, 0x06,
		0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02,
		0x01, 0x03, 0x02, 0x04, 0x04, 0x03, 0x04, 0x05, 0x05, 0x02, 0x00, 0x00,
		0x01, 0x7E, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x21, 0x06, 0x12,
		0x31, 0x41, 0x07, 0x13, 0x51, 0x61, 0x22, 0x71, 0x81, 0x14, 0x32, 0x91,
		0xA1, 0xB1, 0x08, 0x23, 0x42, 0x52, 0xC1, 0x15, 0x33, 0x62, 0x72, 0xD1,
		0xE1, 0xF0, 0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x24, 0x25,
		0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
		0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56,
		0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A,
		0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86,
		0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
		0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3,
		0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6,
		0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9,
		0xDA, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2,
		0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xDA, 0x00, 0x08,
		0x01, 0x01, 0x00, 0x00, 0x3F, 0x00 };
char EOI[] = { 0xFF, 0xD9 };
*/
#endif
